<?php
namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TopologyInitialStatus {
  const ACTIVE = 1;
  const INACTIVE = 2;
  static public $__names = array(
    1 => 'ACTIVE',
    2 => 'INACTIVE',
  );
}

class JavaObjectArg {
  static $_TSPEC;

  public $int_arg = null;
  public $long_arg = null;
  public $string_arg = null;
  public $bool_arg = null;
  public $binary_arg = null;
  public $double_arg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'int_arg',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'long_arg',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'string_arg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'bool_arg',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'binary_arg',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'double_arg',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['int_arg'])) {
        $this->int_arg = $vals['int_arg'];
      }
      if (isset($vals['long_arg'])) {
        $this->long_arg = $vals['long_arg'];
      }
      if (isset($vals['string_arg'])) {
        $this->string_arg = $vals['string_arg'];
      }
      if (isset($vals['bool_arg'])) {
        $this->bool_arg = $vals['bool_arg'];
      }
      if (isset($vals['binary_arg'])) {
        $this->binary_arg = $vals['binary_arg'];
      }
      if (isset($vals['double_arg'])) {
        $this->double_arg = $vals['double_arg'];
      }
    }
  }

  public function getName() {
    return 'JavaObjectArg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->int_arg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->long_arg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->string_arg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bool_arg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->binary_arg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->double_arg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JavaObjectArg');
    if ($this->int_arg !== null) {
      $xfer += $output->writeFieldBegin('int_arg', TType::I32, 1);
      $xfer += $output->writeI32($this->int_arg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->long_arg !== null) {
      $xfer += $output->writeFieldBegin('long_arg', TType::I64, 2);
      $xfer += $output->writeI64($this->long_arg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->string_arg !== null) {
      $xfer += $output->writeFieldBegin('string_arg', TType::STRING, 3);
      $xfer += $output->writeString($this->string_arg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bool_arg !== null) {
      $xfer += $output->writeFieldBegin('bool_arg', TType::BOOL, 4);
      $xfer += $output->writeBool($this->bool_arg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->binary_arg !== null) {
      $xfer += $output->writeFieldBegin('binary_arg', TType::STRING, 5);
      $xfer += $output->writeString($this->binary_arg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->double_arg !== null) {
      $xfer += $output->writeFieldBegin('double_arg', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->double_arg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JavaObject {
  static $_TSPEC;

  public $full_class_name = null;
  public $args_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'full_class_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'args_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\JavaObjectArg',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['full_class_name'])) {
        $this->full_class_name = $vals['full_class_name'];
      }
      if (isset($vals['args_list'])) {
        $this->args_list = $vals['args_list'];
      }
    }
  }

  public function getName() {
    return 'JavaObject';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->full_class_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->args_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \JavaObjectArg();
              $xfer += $elem5->read($input);
              $this->args_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JavaObject');
    if ($this->full_class_name !== null) {
      $xfer += $output->writeFieldBegin('full_class_name', TType::STRING, 1);
      $xfer += $output->writeString($this->full_class_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->args_list !== null) {
      if (!is_array($this->args_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('args_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->args_list));
        {
          foreach ($this->args_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NullStruct {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'NullStruct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NullStruct');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GlobalStreamId {
  static $_TSPEC;

  public $componentId = null;
  public $streamId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'componentId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'streamId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['componentId'])) {
        $this->componentId = $vals['componentId'];
      }
      if (isset($vals['streamId'])) {
        $this->streamId = $vals['streamId'];
      }
    }
  }

  public function getName() {
    return 'GlobalStreamId';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->componentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->streamId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GlobalStreamId');
    if ($this->componentId !== null) {
      $xfer += $output->writeFieldBegin('componentId', TType::STRING, 1);
      $xfer += $output->writeString($this->componentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->streamId !== null) {
      $xfer += $output->writeFieldBegin('streamId', TType::STRING, 2);
      $xfer += $output->writeString($this->streamId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Grouping {
  static $_TSPEC;

  public $fields = null;
  public $shuffle = null;
  public $all = null;
  public $none = null;
  public $direct = null;
  public $custom_object = null;
  public $custom_serialized = null;
  public $local_or_shuffle = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fields',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'shuffle',
          'type' => TType::STRUCT,
          'class' => '\NullStruct',
          ),
        3 => array(
          'var' => 'all',
          'type' => TType::STRUCT,
          'class' => '\NullStruct',
          ),
        4 => array(
          'var' => 'none',
          'type' => TType::STRUCT,
          'class' => '\NullStruct',
          ),
        5 => array(
          'var' => 'direct',
          'type' => TType::STRUCT,
          'class' => '\NullStruct',
          ),
        6 => array(
          'var' => 'custom_object',
          'type' => TType::STRUCT,
          'class' => '\JavaObject',
          ),
        7 => array(
          'var' => 'custom_serialized',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'local_or_shuffle',
          'type' => TType::STRUCT,
          'class' => '\NullStruct',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fields'])) {
        $this->fields = $vals['fields'];
      }
      if (isset($vals['shuffle'])) {
        $this->shuffle = $vals['shuffle'];
      }
      if (isset($vals['all'])) {
        $this->all = $vals['all'];
      }
      if (isset($vals['none'])) {
        $this->none = $vals['none'];
      }
      if (isset($vals['direct'])) {
        $this->direct = $vals['direct'];
      }
      if (isset($vals['custom_object'])) {
        $this->custom_object = $vals['custom_object'];
      }
      if (isset($vals['custom_serialized'])) {
        $this->custom_serialized = $vals['custom_serialized'];
      }
      if (isset($vals['local_or_shuffle'])) {
        $this->local_or_shuffle = $vals['local_or_shuffle'];
      }
    }
  }

  public function getName() {
    return 'Grouping';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->fields = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->fields []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->shuffle = new \NullStruct();
            $xfer += $this->shuffle->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->all = new \NullStruct();
            $xfer += $this->all->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->none = new \NullStruct();
            $xfer += $this->none->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->direct = new \NullStruct();
            $xfer += $this->direct->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->custom_object = new \JavaObject();
            $xfer += $this->custom_object->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->custom_serialized);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->local_or_shuffle = new \NullStruct();
            $xfer += $this->local_or_shuffle->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Grouping');
    if ($this->fields !== null) {
      if (!is_array($this->fields)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fields', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->fields));
        {
          foreach ($this->fields as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shuffle !== null) {
      if (!is_object($this->shuffle)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('shuffle', TType::STRUCT, 2);
      $xfer += $this->shuffle->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->all !== null) {
      if (!is_object($this->all)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('all', TType::STRUCT, 3);
      $xfer += $this->all->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->none !== null) {
      if (!is_object($this->none)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('none', TType::STRUCT, 4);
      $xfer += $this->none->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direct !== null) {
      if (!is_object($this->direct)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('direct', TType::STRUCT, 5);
      $xfer += $this->direct->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->custom_object !== null) {
      if (!is_object($this->custom_object)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('custom_object', TType::STRUCT, 6);
      $xfer += $this->custom_object->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->custom_serialized !== null) {
      $xfer += $output->writeFieldBegin('custom_serialized', TType::STRING, 7);
      $xfer += $output->writeString($this->custom_serialized);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->local_or_shuffle !== null) {
      if (!is_object($this->local_or_shuffle)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('local_or_shuffle', TType::STRUCT, 8);
      $xfer += $this->local_or_shuffle->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StreamInfo {
  static $_TSPEC;

  public $output_fields = null;
  public $direct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'output_fields',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'direct',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['output_fields'])) {
        $this->output_fields = $vals['output_fields'];
      }
      if (isset($vals['direct'])) {
        $this->direct = $vals['direct'];
      }
    }
  }

  public function getName() {
    return 'StreamInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->output_fields = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readString($elem19);
              $this->output_fields []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->direct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StreamInfo');
    if ($this->output_fields !== null) {
      if (!is_array($this->output_fields)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('output_fields', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->output_fields));
        {
          foreach ($this->output_fields as $iter20)
          {
            $xfer += $output->writeString($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direct !== null) {
      $xfer += $output->writeFieldBegin('direct', TType::BOOL, 2);
      $xfer += $output->writeBool($this->direct);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShellComponent {
  static $_TSPEC;

  public $execution_command = null;
  public $script = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'execution_command',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'script',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['execution_command'])) {
        $this->execution_command = $vals['execution_command'];
      }
      if (isset($vals['script'])) {
        $this->script = $vals['script'];
      }
    }
  }

  public function getName() {
    return 'ShellComponent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->execution_command);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->script);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShellComponent');
    if ($this->execution_command !== null) {
      $xfer += $output->writeFieldBegin('execution_command', TType::STRING, 1);
      $xfer += $output->writeString($this->execution_command);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->script !== null) {
      $xfer += $output->writeFieldBegin('script', TType::STRING, 2);
      $xfer += $output->writeString($this->script);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ComponentObject {
  static $_TSPEC;

  public $serialized_java = null;
  public $shell = null;
  public $java_object = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'serialized_java',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'shell',
          'type' => TType::STRUCT,
          'class' => '\ShellComponent',
          ),
        3 => array(
          'var' => 'java_object',
          'type' => TType::STRUCT,
          'class' => '\JavaObject',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['serialized_java'])) {
        $this->serialized_java = $vals['serialized_java'];
      }
      if (isset($vals['shell'])) {
        $this->shell = $vals['shell'];
      }
      if (isset($vals['java_object'])) {
        $this->java_object = $vals['java_object'];
      }
    }
  }

  public function getName() {
    return 'ComponentObject';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serialized_java);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->shell = new \ShellComponent();
            $xfer += $this->shell->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->java_object = new \JavaObject();
            $xfer += $this->java_object->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ComponentObject');
    if ($this->serialized_java !== null) {
      $xfer += $output->writeFieldBegin('serialized_java', TType::STRING, 1);
      $xfer += $output->writeString($this->serialized_java);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shell !== null) {
      if (!is_object($this->shell)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('shell', TType::STRUCT, 2);
      $xfer += $this->shell->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->java_object !== null) {
      if (!is_object($this->java_object)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('java_object', TType::STRUCT, 3);
      $xfer += $this->java_object->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ComponentCommon {
  static $_TSPEC;

  public $inputs = null;
  public $streams = null;
  public $parallelism_hint = null;
  public $json_conf = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'inputs',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\GlobalStreamId',
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Grouping',
            ),
          ),
        2 => array(
          'var' => 'streams',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\StreamInfo',
            ),
          ),
        3 => array(
          'var' => 'parallelism_hint',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'json_conf',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['inputs'])) {
        $this->inputs = $vals['inputs'];
      }
      if (isset($vals['streams'])) {
        $this->streams = $vals['streams'];
      }
      if (isset($vals['parallelism_hint'])) {
        $this->parallelism_hint = $vals['parallelism_hint'];
      }
      if (isset($vals['json_conf'])) {
        $this->json_conf = $vals['json_conf'];
      }
    }
  }

  public function getName() {
    return 'ComponentCommon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->inputs = array();
            $_size21 = 0;
            $_ktype22 = 0;
            $_vtype23 = 0;
            $xfer += $input->readMapBegin($_ktype22, $_vtype23, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $key26 = new \GlobalStreamId();
              $val27 = new \Grouping();
              $key26 = new \GlobalStreamId();
              $xfer += $key26->read($input);
              $val27 = new \Grouping();
              $xfer += $val27->read($input);
              $this->inputs[$key26] = $val27;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->streams = array();
            $_size28 = 0;
            $_ktype29 = 0;
            $_vtype30 = 0;
            $xfer += $input->readMapBegin($_ktype29, $_vtype30, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $key33 = '';
              $val34 = new \StreamInfo();
              $xfer += $input->readString($key33);
              $val34 = new \StreamInfo();
              $xfer += $val34->read($input);
              $this->streams[$key33] = $val34;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parallelism_hint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json_conf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ComponentCommon');
    if ($this->inputs !== null) {
      if (!is_array($this->inputs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inputs', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRUCT, TType::STRUCT, count($this->inputs));
        {
          foreach ($this->inputs as $kiter35 => $viter36)
          {
            $xfer += $kiter35->write($output);
            $xfer += $viter36->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->streams !== null) {
      if (!is_array($this->streams)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('streams', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->streams));
        {
          foreach ($this->streams as $kiter37 => $viter38)
          {
            $xfer += $output->writeString($kiter37);
            $xfer += $viter38->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parallelism_hint !== null) {
      $xfer += $output->writeFieldBegin('parallelism_hint', TType::I32, 3);
      $xfer += $output->writeI32($this->parallelism_hint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->json_conf !== null) {
      $xfer += $output->writeFieldBegin('json_conf', TType::STRING, 4);
      $xfer += $output->writeString($this->json_conf);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpoutSpec {
  static $_TSPEC;

  public $spout_object = null;
  public $common = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spout_object',
          'type' => TType::STRUCT,
          'class' => '\ComponentObject',
          ),
        2 => array(
          'var' => 'common',
          'type' => TType::STRUCT,
          'class' => '\ComponentCommon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spout_object'])) {
        $this->spout_object = $vals['spout_object'];
      }
      if (isset($vals['common'])) {
        $this->common = $vals['common'];
      }
    }
  }

  public function getName() {
    return 'SpoutSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->spout_object = new \ComponentObject();
            $xfer += $this->spout_object->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->common = new \ComponentCommon();
            $xfer += $this->common->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpoutSpec');
    if ($this->spout_object !== null) {
      if (!is_object($this->spout_object)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spout_object', TType::STRUCT, 1);
      $xfer += $this->spout_object->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->common !== null) {
      if (!is_object($this->common)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('common', TType::STRUCT, 2);
      $xfer += $this->common->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bolt {
  static $_TSPEC;

  public $bolt_object = null;
  public $common = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bolt_object',
          'type' => TType::STRUCT,
          'class' => '\ComponentObject',
          ),
        2 => array(
          'var' => 'common',
          'type' => TType::STRUCT,
          'class' => '\ComponentCommon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bolt_object'])) {
        $this->bolt_object = $vals['bolt_object'];
      }
      if (isset($vals['common'])) {
        $this->common = $vals['common'];
      }
    }
  }

  public function getName() {
    return 'Bolt';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->bolt_object = new \ComponentObject();
            $xfer += $this->bolt_object->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->common = new \ComponentCommon();
            $xfer += $this->common->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bolt');
    if ($this->bolt_object !== null) {
      if (!is_object($this->bolt_object)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bolt_object', TType::STRUCT, 1);
      $xfer += $this->bolt_object->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->common !== null) {
      if (!is_object($this->common)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('common', TType::STRUCT, 2);
      $xfer += $this->common->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StateSpoutSpec {
  static $_TSPEC;

  public $state_spout_object = null;
  public $common = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'state_spout_object',
          'type' => TType::STRUCT,
          'class' => '\ComponentObject',
          ),
        2 => array(
          'var' => 'common',
          'type' => TType::STRUCT,
          'class' => '\ComponentCommon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['state_spout_object'])) {
        $this->state_spout_object = $vals['state_spout_object'];
      }
      if (isset($vals['common'])) {
        $this->common = $vals['common'];
      }
    }
  }

  public function getName() {
    return 'StateSpoutSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->state_spout_object = new \ComponentObject();
            $xfer += $this->state_spout_object->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->common = new \ComponentCommon();
            $xfer += $this->common->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StateSpoutSpec');
    if ($this->state_spout_object !== null) {
      if (!is_object($this->state_spout_object)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('state_spout_object', TType::STRUCT, 1);
      $xfer += $this->state_spout_object->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->common !== null) {
      if (!is_object($this->common)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('common', TType::STRUCT, 2);
      $xfer += $this->common->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StormTopology {
  static $_TSPEC;

  public $spouts = null;
  public $bolts = null;
  public $state_spouts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spouts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\SpoutSpec',
            ),
          ),
        2 => array(
          'var' => 'bolts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Bolt',
            ),
          ),
        3 => array(
          'var' => 'state_spouts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\StateSpoutSpec',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spouts'])) {
        $this->spouts = $vals['spouts'];
      }
      if (isset($vals['bolts'])) {
        $this->bolts = $vals['bolts'];
      }
      if (isset($vals['state_spouts'])) {
        $this->state_spouts = $vals['state_spouts'];
      }
    }
  }

  public function getName() {
    return 'StormTopology';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->spouts = array();
            $_size39 = 0;
            $_ktype40 = 0;
            $_vtype41 = 0;
            $xfer += $input->readMapBegin($_ktype40, $_vtype41, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $key44 = '';
              $val45 = new \SpoutSpec();
              $xfer += $input->readString($key44);
              $val45 = new \SpoutSpec();
              $xfer += $val45->read($input);
              $this->spouts[$key44] = $val45;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->bolts = array();
            $_size46 = 0;
            $_ktype47 = 0;
            $_vtype48 = 0;
            $xfer += $input->readMapBegin($_ktype47, $_vtype48, $_size46);
            for ($_i50 = 0; $_i50 < $_size46; ++$_i50)
            {
              $key51 = '';
              $val52 = new \Bolt();
              $xfer += $input->readString($key51);
              $val52 = new \Bolt();
              $xfer += $val52->read($input);
              $this->bolts[$key51] = $val52;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->state_spouts = array();
            $_size53 = 0;
            $_ktype54 = 0;
            $_vtype55 = 0;
            $xfer += $input->readMapBegin($_ktype54, $_vtype55, $_size53);
            for ($_i57 = 0; $_i57 < $_size53; ++$_i57)
            {
              $key58 = '';
              $val59 = new \StateSpoutSpec();
              $xfer += $input->readString($key58);
              $val59 = new \StateSpoutSpec();
              $xfer += $val59->read($input);
              $this->state_spouts[$key58] = $val59;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StormTopology');
    if ($this->spouts !== null) {
      if (!is_array($this->spouts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spouts', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->spouts));
        {
          foreach ($this->spouts as $kiter60 => $viter61)
          {
            $xfer += $output->writeString($kiter60);
            $xfer += $viter61->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bolts !== null) {
      if (!is_array($this->bolts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bolts', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->bolts));
        {
          foreach ($this->bolts as $kiter62 => $viter63)
          {
            $xfer += $output->writeString($kiter62);
            $xfer += $viter63->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state_spouts !== null) {
      if (!is_array($this->state_spouts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('state_spouts', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->state_spouts));
        {
          foreach ($this->state_spouts as $kiter64 => $viter65)
          {
            $xfer += $output->writeString($kiter64);
            $xfer += $viter65->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AlreadyAliveException extends TException {
  static $_TSPEC;

  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'AlreadyAliveException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AlreadyAliveException');
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 1);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotAliveException extends TException {
  static $_TSPEC;

  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'NotAliveException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotAliveException');
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 1);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvalidTopologyException extends TException {
  static $_TSPEC;

  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'InvalidTopologyException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidTopologyException');
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 1);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TopologySummary {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $num_tasks = null;
  public $num_executors = null;
  public $num_workers = null;
  public $uptime_secs = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'num_tasks',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'num_executors',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'num_workers',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'uptime_secs',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['num_tasks'])) {
        $this->num_tasks = $vals['num_tasks'];
      }
      if (isset($vals['num_executors'])) {
        $this->num_executors = $vals['num_executors'];
      }
      if (isset($vals['num_workers'])) {
        $this->num_workers = $vals['num_workers'];
      }
      if (isset($vals['uptime_secs'])) {
        $this->uptime_secs = $vals['uptime_secs'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'TopologySummary';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_tasks);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_executors);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_workers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uptime_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopologySummary');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_tasks !== null) {
      $xfer += $output->writeFieldBegin('num_tasks', TType::I32, 3);
      $xfer += $output->writeI32($this->num_tasks);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_executors !== null) {
      $xfer += $output->writeFieldBegin('num_executors', TType::I32, 4);
      $xfer += $output->writeI32($this->num_executors);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_workers !== null) {
      $xfer += $output->writeFieldBegin('num_workers', TType::I32, 5);
      $xfer += $output->writeI32($this->num_workers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uptime_secs !== null) {
      $xfer += $output->writeFieldBegin('uptime_secs', TType::I32, 6);
      $xfer += $output->writeI32($this->uptime_secs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 7);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SupervisorSummary {
  static $_TSPEC;

  public $host = null;
  public $uptime_secs = null;
  public $num_workers = null;
  public $num_used_workers = null;
  public $supervisor_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uptime_secs',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'num_workers',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'num_used_workers',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'supervisor_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['uptime_secs'])) {
        $this->uptime_secs = $vals['uptime_secs'];
      }
      if (isset($vals['num_workers'])) {
        $this->num_workers = $vals['num_workers'];
      }
      if (isset($vals['num_used_workers'])) {
        $this->num_used_workers = $vals['num_used_workers'];
      }
      if (isset($vals['supervisor_id'])) {
        $this->supervisor_id = $vals['supervisor_id'];
      }
    }
  }

  public function getName() {
    return 'SupervisorSummary';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uptime_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_workers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_used_workers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supervisor_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SupervisorSummary');
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uptime_secs !== null) {
      $xfer += $output->writeFieldBegin('uptime_secs', TType::I32, 2);
      $xfer += $output->writeI32($this->uptime_secs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_workers !== null) {
      $xfer += $output->writeFieldBegin('num_workers', TType::I32, 3);
      $xfer += $output->writeI32($this->num_workers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_used_workers !== null) {
      $xfer += $output->writeFieldBegin('num_used_workers', TType::I32, 4);
      $xfer += $output->writeI32($this->num_used_workers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supervisor_id !== null) {
      $xfer += $output->writeFieldBegin('supervisor_id', TType::STRING, 5);
      $xfer += $output->writeString($this->supervisor_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ClusterSummary {
  static $_TSPEC;

  public $supervisors = null;
  public $nimbus_uptime_secs = null;
  public $topologies = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'supervisors',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SupervisorSummary',
            ),
          ),
        2 => array(
          'var' => 'nimbus_uptime_secs',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'topologies',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TopologySummary',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['supervisors'])) {
        $this->supervisors = $vals['supervisors'];
      }
      if (isset($vals['nimbus_uptime_secs'])) {
        $this->nimbus_uptime_secs = $vals['nimbus_uptime_secs'];
      }
      if (isset($vals['topologies'])) {
        $this->topologies = $vals['topologies'];
      }
    }
  }

  public function getName() {
    return 'ClusterSummary';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->supervisors = array();
            $_size66 = 0;
            $_etype69 = 0;
            $xfer += $input->readListBegin($_etype69, $_size66);
            for ($_i70 = 0; $_i70 < $_size66; ++$_i70)
            {
              $elem71 = null;
              $elem71 = new \SupervisorSummary();
              $xfer += $elem71->read($input);
              $this->supervisors []= $elem71;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nimbus_uptime_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->topologies = array();
            $_size72 = 0;
            $_etype75 = 0;
            $xfer += $input->readListBegin($_etype75, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $elem77 = null;
              $elem77 = new \TopologySummary();
              $xfer += $elem77->read($input);
              $this->topologies []= $elem77;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ClusterSummary');
    if ($this->supervisors !== null) {
      if (!is_array($this->supervisors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('supervisors', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->supervisors));
        {
          foreach ($this->supervisors as $iter78)
          {
            $xfer += $iter78->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nimbus_uptime_secs !== null) {
      $xfer += $output->writeFieldBegin('nimbus_uptime_secs', TType::I32, 2);
      $xfer += $output->writeI32($this->nimbus_uptime_secs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->topologies !== null) {
      if (!is_array($this->topologies)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('topologies', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->topologies));
        {
          foreach ($this->topologies as $iter79)
          {
            $xfer += $iter79->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ErrorInfo {
  static $_TSPEC;

  public $error = null;
  public $error_time_secs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'error_time_secs',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['error_time_secs'])) {
        $this->error_time_secs = $vals['error_time_secs'];
      }
    }
  }

  public function getName() {
    return 'ErrorInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error_time_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ErrorInfo');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRING, 1);
      $xfer += $output->writeString($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_time_secs !== null) {
      $xfer += $output->writeFieldBegin('error_time_secs', TType::I32, 2);
      $xfer += $output->writeI32($this->error_time_secs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoltStats {
  static $_TSPEC;

  public $acked = null;
  public $failed = null;
  public $process_ms_avg = null;
  public $executed = null;
  public $execute_ms_avg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'acked',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\GlobalStreamId',
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        2 => array(
          'var' => 'failed',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\GlobalStreamId',
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        3 => array(
          'var' => 'process_ms_avg',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::DOUBLE,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\GlobalStreamId',
            ),
            'val' => array(
              'type' => TType::DOUBLE,
              ),
            ),
          ),
        4 => array(
          'var' => 'executed',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\GlobalStreamId',
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        5 => array(
          'var' => 'execute_ms_avg',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::DOUBLE,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\GlobalStreamId',
            ),
            'val' => array(
              'type' => TType::DOUBLE,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['acked'])) {
        $this->acked = $vals['acked'];
      }
      if (isset($vals['failed'])) {
        $this->failed = $vals['failed'];
      }
      if (isset($vals['process_ms_avg'])) {
        $this->process_ms_avg = $vals['process_ms_avg'];
      }
      if (isset($vals['executed'])) {
        $this->executed = $vals['executed'];
      }
      if (isset($vals['execute_ms_avg'])) {
        $this->execute_ms_avg = $vals['execute_ms_avg'];
      }
    }
  }

  public function getName() {
    return 'BoltStats';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->acked = array();
            $_size80 = 0;
            $_ktype81 = 0;
            $_vtype82 = 0;
            $xfer += $input->readMapBegin($_ktype81, $_vtype82, $_size80);
            for ($_i84 = 0; $_i84 < $_size80; ++$_i84)
            {
              $key85 = '';
              $val86 = array();
              $xfer += $input->readString($key85);
              $val86 = array();
              $_size87 = 0;
              $_ktype88 = 0;
              $_vtype89 = 0;
              $xfer += $input->readMapBegin($_ktype88, $_vtype89, $_size87);
              for ($_i91 = 0; $_i91 < $_size87; ++$_i91)
              {
                $key92 = new \GlobalStreamId();
                $val93 = 0;
                $key92 = new \GlobalStreamId();
                $xfer += $key92->read($input);
                $xfer += $input->readI64($val93);
                $val86[$key92] = $val93;
              }
              $xfer += $input->readMapEnd();
              $this->acked[$key85] = $val86;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->failed = array();
            $_size94 = 0;
            $_ktype95 = 0;
            $_vtype96 = 0;
            $xfer += $input->readMapBegin($_ktype95, $_vtype96, $_size94);
            for ($_i98 = 0; $_i98 < $_size94; ++$_i98)
            {
              $key99 = '';
              $val100 = array();
              $xfer += $input->readString($key99);
              $val100 = array();
              $_size101 = 0;
              $_ktype102 = 0;
              $_vtype103 = 0;
              $xfer += $input->readMapBegin($_ktype102, $_vtype103, $_size101);
              for ($_i105 = 0; $_i105 < $_size101; ++$_i105)
              {
                $key106 = new \GlobalStreamId();
                $val107 = 0;
                $key106 = new \GlobalStreamId();
                $xfer += $key106->read($input);
                $xfer += $input->readI64($val107);
                $val100[$key106] = $val107;
              }
              $xfer += $input->readMapEnd();
              $this->failed[$key99] = $val100;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->process_ms_avg = array();
            $_size108 = 0;
            $_ktype109 = 0;
            $_vtype110 = 0;
            $xfer += $input->readMapBegin($_ktype109, $_vtype110, $_size108);
            for ($_i112 = 0; $_i112 < $_size108; ++$_i112)
            {
              $key113 = '';
              $val114 = array();
              $xfer += $input->readString($key113);
              $val114 = array();
              $_size115 = 0;
              $_ktype116 = 0;
              $_vtype117 = 0;
              $xfer += $input->readMapBegin($_ktype116, $_vtype117, $_size115);
              for ($_i119 = 0; $_i119 < $_size115; ++$_i119)
              {
                $key120 = new \GlobalStreamId();
                $val121 = 0.0;
                $key120 = new \GlobalStreamId();
                $xfer += $key120->read($input);
                $xfer += $input->readDouble($val121);
                $val114[$key120] = $val121;
              }
              $xfer += $input->readMapEnd();
              $this->process_ms_avg[$key113] = $val114;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->executed = array();
            $_size122 = 0;
            $_ktype123 = 0;
            $_vtype124 = 0;
            $xfer += $input->readMapBegin($_ktype123, $_vtype124, $_size122);
            for ($_i126 = 0; $_i126 < $_size122; ++$_i126)
            {
              $key127 = '';
              $val128 = array();
              $xfer += $input->readString($key127);
              $val128 = array();
              $_size129 = 0;
              $_ktype130 = 0;
              $_vtype131 = 0;
              $xfer += $input->readMapBegin($_ktype130, $_vtype131, $_size129);
              for ($_i133 = 0; $_i133 < $_size129; ++$_i133)
              {
                $key134 = new \GlobalStreamId();
                $val135 = 0;
                $key134 = new \GlobalStreamId();
                $xfer += $key134->read($input);
                $xfer += $input->readI64($val135);
                $val128[$key134] = $val135;
              }
              $xfer += $input->readMapEnd();
              $this->executed[$key127] = $val128;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->execute_ms_avg = array();
            $_size136 = 0;
            $_ktype137 = 0;
            $_vtype138 = 0;
            $xfer += $input->readMapBegin($_ktype137, $_vtype138, $_size136);
            for ($_i140 = 0; $_i140 < $_size136; ++$_i140)
            {
              $key141 = '';
              $val142 = array();
              $xfer += $input->readString($key141);
              $val142 = array();
              $_size143 = 0;
              $_ktype144 = 0;
              $_vtype145 = 0;
              $xfer += $input->readMapBegin($_ktype144, $_vtype145, $_size143);
              for ($_i147 = 0; $_i147 < $_size143; ++$_i147)
              {
                $key148 = new \GlobalStreamId();
                $val149 = 0.0;
                $key148 = new \GlobalStreamId();
                $xfer += $key148->read($input);
                $xfer += $input->readDouble($val149);
                $val142[$key148] = $val149;
              }
              $xfer += $input->readMapEnd();
              $this->execute_ms_avg[$key141] = $val142;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoltStats');
    if ($this->acked !== null) {
      if (!is_array($this->acked)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('acked', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->acked));
        {
          foreach ($this->acked as $kiter150 => $viter151)
          {
            $xfer += $output->writeString($kiter150);
            {
              $output->writeMapBegin(TType::STRUCT, TType::I64, count($viter151));
              {
                foreach ($viter151 as $kiter152 => $viter153)
                {
                  $xfer += $kiter152->write($output);
                  $xfer += $output->writeI64($viter153);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failed !== null) {
      if (!is_array($this->failed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('failed', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->failed));
        {
          foreach ($this->failed as $kiter154 => $viter155)
          {
            $xfer += $output->writeString($kiter154);
            {
              $output->writeMapBegin(TType::STRUCT, TType::I64, count($viter155));
              {
                foreach ($viter155 as $kiter156 => $viter157)
                {
                  $xfer += $kiter156->write($output);
                  $xfer += $output->writeI64($viter157);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->process_ms_avg !== null) {
      if (!is_array($this->process_ms_avg)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('process_ms_avg', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->process_ms_avg));
        {
          foreach ($this->process_ms_avg as $kiter158 => $viter159)
          {
            $xfer += $output->writeString($kiter158);
            {
              $output->writeMapBegin(TType::STRUCT, TType::DOUBLE, count($viter159));
              {
                foreach ($viter159 as $kiter160 => $viter161)
                {
                  $xfer += $kiter160->write($output);
                  $xfer += $output->writeDouble($viter161);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executed !== null) {
      if (!is_array($this->executed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('executed', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->executed));
        {
          foreach ($this->executed as $kiter162 => $viter163)
          {
            $xfer += $output->writeString($kiter162);
            {
              $output->writeMapBegin(TType::STRUCT, TType::I64, count($viter163));
              {
                foreach ($viter163 as $kiter164 => $viter165)
                {
                  $xfer += $kiter164->write($output);
                  $xfer += $output->writeI64($viter165);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execute_ms_avg !== null) {
      if (!is_array($this->execute_ms_avg)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('execute_ms_avg', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->execute_ms_avg));
        {
          foreach ($this->execute_ms_avg as $kiter166 => $viter167)
          {
            $xfer += $output->writeString($kiter166);
            {
              $output->writeMapBegin(TType::STRUCT, TType::DOUBLE, count($viter167));
              {
                foreach ($viter167 as $kiter168 => $viter169)
                {
                  $xfer += $kiter168->write($output);
                  $xfer += $output->writeDouble($viter169);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpoutStats {
  static $_TSPEC;

  public $acked = null;
  public $failed = null;
  public $complete_ms_avg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'acked',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        2 => array(
          'var' => 'failed',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        3 => array(
          'var' => 'complete_ms_avg',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::DOUBLE,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::DOUBLE,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['acked'])) {
        $this->acked = $vals['acked'];
      }
      if (isset($vals['failed'])) {
        $this->failed = $vals['failed'];
      }
      if (isset($vals['complete_ms_avg'])) {
        $this->complete_ms_avg = $vals['complete_ms_avg'];
      }
    }
  }

  public function getName() {
    return 'SpoutStats';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->acked = array();
            $_size170 = 0;
            $_ktype171 = 0;
            $_vtype172 = 0;
            $xfer += $input->readMapBegin($_ktype171, $_vtype172, $_size170);
            for ($_i174 = 0; $_i174 < $_size170; ++$_i174)
            {
              $key175 = '';
              $val176 = array();
              $xfer += $input->readString($key175);
              $val176 = array();
              $_size177 = 0;
              $_ktype178 = 0;
              $_vtype179 = 0;
              $xfer += $input->readMapBegin($_ktype178, $_vtype179, $_size177);
              for ($_i181 = 0; $_i181 < $_size177; ++$_i181)
              {
                $key182 = '';
                $val183 = 0;
                $xfer += $input->readString($key182);
                $xfer += $input->readI64($val183);
                $val176[$key182] = $val183;
              }
              $xfer += $input->readMapEnd();
              $this->acked[$key175] = $val176;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->failed = array();
            $_size184 = 0;
            $_ktype185 = 0;
            $_vtype186 = 0;
            $xfer += $input->readMapBegin($_ktype185, $_vtype186, $_size184);
            for ($_i188 = 0; $_i188 < $_size184; ++$_i188)
            {
              $key189 = '';
              $val190 = array();
              $xfer += $input->readString($key189);
              $val190 = array();
              $_size191 = 0;
              $_ktype192 = 0;
              $_vtype193 = 0;
              $xfer += $input->readMapBegin($_ktype192, $_vtype193, $_size191);
              for ($_i195 = 0; $_i195 < $_size191; ++$_i195)
              {
                $key196 = '';
                $val197 = 0;
                $xfer += $input->readString($key196);
                $xfer += $input->readI64($val197);
                $val190[$key196] = $val197;
              }
              $xfer += $input->readMapEnd();
              $this->failed[$key189] = $val190;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->complete_ms_avg = array();
            $_size198 = 0;
            $_ktype199 = 0;
            $_vtype200 = 0;
            $xfer += $input->readMapBegin($_ktype199, $_vtype200, $_size198);
            for ($_i202 = 0; $_i202 < $_size198; ++$_i202)
            {
              $key203 = '';
              $val204 = array();
              $xfer += $input->readString($key203);
              $val204 = array();
              $_size205 = 0;
              $_ktype206 = 0;
              $_vtype207 = 0;
              $xfer += $input->readMapBegin($_ktype206, $_vtype207, $_size205);
              for ($_i209 = 0; $_i209 < $_size205; ++$_i209)
              {
                $key210 = '';
                $val211 = 0.0;
                $xfer += $input->readString($key210);
                $xfer += $input->readDouble($val211);
                $val204[$key210] = $val211;
              }
              $xfer += $input->readMapEnd();
              $this->complete_ms_avg[$key203] = $val204;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpoutStats');
    if ($this->acked !== null) {
      if (!is_array($this->acked)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('acked', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->acked));
        {
          foreach ($this->acked as $kiter212 => $viter213)
          {
            $xfer += $output->writeString($kiter212);
            {
              $output->writeMapBegin(TType::STRING, TType::I64, count($viter213));
              {
                foreach ($viter213 as $kiter214 => $viter215)
                {
                  $xfer += $output->writeString($kiter214);
                  $xfer += $output->writeI64($viter215);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failed !== null) {
      if (!is_array($this->failed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('failed', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->failed));
        {
          foreach ($this->failed as $kiter216 => $viter217)
          {
            $xfer += $output->writeString($kiter216);
            {
              $output->writeMapBegin(TType::STRING, TType::I64, count($viter217));
              {
                foreach ($viter217 as $kiter218 => $viter219)
                {
                  $xfer += $output->writeString($kiter218);
                  $xfer += $output->writeI64($viter219);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->complete_ms_avg !== null) {
      if (!is_array($this->complete_ms_avg)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('complete_ms_avg', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->complete_ms_avg));
        {
          foreach ($this->complete_ms_avg as $kiter220 => $viter221)
          {
            $xfer += $output->writeString($kiter220);
            {
              $output->writeMapBegin(TType::STRING, TType::DOUBLE, count($viter221));
              {
                foreach ($viter221 as $kiter222 => $viter223)
                {
                  $xfer += $output->writeString($kiter222);
                  $xfer += $output->writeDouble($viter223);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExecutorSpecificStats {
  static $_TSPEC;

  public $bolt = null;
  public $spout = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bolt',
          'type' => TType::STRUCT,
          'class' => '\BoltStats',
          ),
        2 => array(
          'var' => 'spout',
          'type' => TType::STRUCT,
          'class' => '\SpoutStats',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bolt'])) {
        $this->bolt = $vals['bolt'];
      }
      if (isset($vals['spout'])) {
        $this->spout = $vals['spout'];
      }
    }
  }

  public function getName() {
    return 'ExecutorSpecificStats';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->bolt = new \BoltStats();
            $xfer += $this->bolt->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spout = new \SpoutStats();
            $xfer += $this->spout->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExecutorSpecificStats');
    if ($this->bolt !== null) {
      if (!is_object($this->bolt)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bolt', TType::STRUCT, 1);
      $xfer += $this->bolt->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spout !== null) {
      if (!is_object($this->spout)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spout', TType::STRUCT, 2);
      $xfer += $this->spout->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExecutorStats {
  static $_TSPEC;

  public $emitted = null;
  public $transferred = null;
  public $specific = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'emitted',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        2 => array(
          'var' => 'transferred',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        3 => array(
          'var' => 'specific',
          'type' => TType::STRUCT,
          'class' => '\ExecutorSpecificStats',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['emitted'])) {
        $this->emitted = $vals['emitted'];
      }
      if (isset($vals['transferred'])) {
        $this->transferred = $vals['transferred'];
      }
      if (isset($vals['specific'])) {
        $this->specific = $vals['specific'];
      }
    }
  }

  public function getName() {
    return 'ExecutorStats';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->emitted = array();
            $_size224 = 0;
            $_ktype225 = 0;
            $_vtype226 = 0;
            $xfer += $input->readMapBegin($_ktype225, $_vtype226, $_size224);
            for ($_i228 = 0; $_i228 < $_size224; ++$_i228)
            {
              $key229 = '';
              $val230 = array();
              $xfer += $input->readString($key229);
              $val230 = array();
              $_size231 = 0;
              $_ktype232 = 0;
              $_vtype233 = 0;
              $xfer += $input->readMapBegin($_ktype232, $_vtype233, $_size231);
              for ($_i235 = 0; $_i235 < $_size231; ++$_i235)
              {
                $key236 = '';
                $val237 = 0;
                $xfer += $input->readString($key236);
                $xfer += $input->readI64($val237);
                $val230[$key236] = $val237;
              }
              $xfer += $input->readMapEnd();
              $this->emitted[$key229] = $val230;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->transferred = array();
            $_size238 = 0;
            $_ktype239 = 0;
            $_vtype240 = 0;
            $xfer += $input->readMapBegin($_ktype239, $_vtype240, $_size238);
            for ($_i242 = 0; $_i242 < $_size238; ++$_i242)
            {
              $key243 = '';
              $val244 = array();
              $xfer += $input->readString($key243);
              $val244 = array();
              $_size245 = 0;
              $_ktype246 = 0;
              $_vtype247 = 0;
              $xfer += $input->readMapBegin($_ktype246, $_vtype247, $_size245);
              for ($_i249 = 0; $_i249 < $_size245; ++$_i249)
              {
                $key250 = '';
                $val251 = 0;
                $xfer += $input->readString($key250);
                $xfer += $input->readI64($val251);
                $val244[$key250] = $val251;
              }
              $xfer += $input->readMapEnd();
              $this->transferred[$key243] = $val244;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->specific = new \ExecutorSpecificStats();
            $xfer += $this->specific->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExecutorStats');
    if ($this->emitted !== null) {
      if (!is_array($this->emitted)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emitted', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->emitted));
        {
          foreach ($this->emitted as $kiter252 => $viter253)
          {
            $xfer += $output->writeString($kiter252);
            {
              $output->writeMapBegin(TType::STRING, TType::I64, count($viter253));
              {
                foreach ($viter253 as $kiter254 => $viter255)
                {
                  $xfer += $output->writeString($kiter254);
                  $xfer += $output->writeI64($viter255);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transferred !== null) {
      if (!is_array($this->transferred)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transferred', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->transferred));
        {
          foreach ($this->transferred as $kiter256 => $viter257)
          {
            $xfer += $output->writeString($kiter256);
            {
              $output->writeMapBegin(TType::STRING, TType::I64, count($viter257));
              {
                foreach ($viter257 as $kiter258 => $viter259)
                {
                  $xfer += $output->writeString($kiter258);
                  $xfer += $output->writeI64($viter259);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->specific !== null) {
      if (!is_object($this->specific)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('specific', TType::STRUCT, 3);
      $xfer += $this->specific->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExecutorInfo {
  static $_TSPEC;

  public $task_start = null;
  public $task_end = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'task_start',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_end',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['task_start'])) {
        $this->task_start = $vals['task_start'];
      }
      if (isset($vals['task_end'])) {
        $this->task_end = $vals['task_end'];
      }
    }
  }

  public function getName() {
    return 'ExecutorInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_end);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExecutorInfo');
    if ($this->task_start !== null) {
      $xfer += $output->writeFieldBegin('task_start', TType::I32, 1);
      $xfer += $output->writeI32($this->task_start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_end !== null) {
      $xfer += $output->writeFieldBegin('task_end', TType::I32, 2);
      $xfer += $output->writeI32($this->task_end);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExecutorSummary {
  static $_TSPEC;

  public $executor_info = null;
  public $component_id = null;
  public $host = null;
  public $port = null;
  public $uptime_secs = null;
  public $stats = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'executor_info',
          'type' => TType::STRUCT,
          'class' => '\ExecutorInfo',
          ),
        2 => array(
          'var' => 'component_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'uptime_secs',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'stats',
          'type' => TType::STRUCT,
          'class' => '\ExecutorStats',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['executor_info'])) {
        $this->executor_info = $vals['executor_info'];
      }
      if (isset($vals['component_id'])) {
        $this->component_id = $vals['component_id'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['uptime_secs'])) {
        $this->uptime_secs = $vals['uptime_secs'];
      }
      if (isset($vals['stats'])) {
        $this->stats = $vals['stats'];
      }
    }
  }

  public function getName() {
    return 'ExecutorSummary';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->executor_info = new \ExecutorInfo();
            $xfer += $this->executor_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->component_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uptime_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->stats = new \ExecutorStats();
            $xfer += $this->stats->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExecutorSummary');
    if ($this->executor_info !== null) {
      if (!is_object($this->executor_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('executor_info', TType::STRUCT, 1);
      $xfer += $this->executor_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->component_id !== null) {
      $xfer += $output->writeFieldBegin('component_id', TType::STRING, 2);
      $xfer += $output->writeString($this->component_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 3);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 4);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uptime_secs !== null) {
      $xfer += $output->writeFieldBegin('uptime_secs', TType::I32, 5);
      $xfer += $output->writeI32($this->uptime_secs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stats !== null) {
      if (!is_object($this->stats)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stats', TType::STRUCT, 7);
      $xfer += $this->stats->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TopologyInfo {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $uptime_secs = null;
  public $executors = null;
  public $status = null;
  public $errors = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uptime_secs',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'executors',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ExecutorSummary',
            ),
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'errors',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\ErrorInfo',
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['uptime_secs'])) {
        $this->uptime_secs = $vals['uptime_secs'];
      }
      if (isset($vals['executors'])) {
        $this->executors = $vals['executors'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['errors'])) {
        $this->errors = $vals['errors'];
      }
    }
  }

  public function getName() {
    return 'TopologyInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uptime_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->executors = array();
            $_size260 = 0;
            $_etype263 = 0;
            $xfer += $input->readListBegin($_etype263, $_size260);
            for ($_i264 = 0; $_i264 < $_size260; ++$_i264)
            {
              $elem265 = null;
              $elem265 = new \ExecutorSummary();
              $xfer += $elem265->read($input);
              $this->executors []= $elem265;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->errors = array();
            $_size266 = 0;
            $_ktype267 = 0;
            $_vtype268 = 0;
            $xfer += $input->readMapBegin($_ktype267, $_vtype268, $_size266);
            for ($_i270 = 0; $_i270 < $_size266; ++$_i270)
            {
              $key271 = '';
              $val272 = array();
              $xfer += $input->readString($key271);
              $val272 = array();
              $_size273 = 0;
              $_etype276 = 0;
              $xfer += $input->readListBegin($_etype276, $_size273);
              for ($_i277 = 0; $_i277 < $_size273; ++$_i277)
              {
                $elem278 = null;
                $elem278 = new \ErrorInfo();
                $xfer += $elem278->read($input);
                $val272 []= $elem278;
              }
              $xfer += $input->readListEnd();
              $this->errors[$key271] = $val272;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopologyInfo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uptime_secs !== null) {
      $xfer += $output->writeFieldBegin('uptime_secs', TType::I32, 3);
      $xfer += $output->writeI32($this->uptime_secs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executors !== null) {
      if (!is_array($this->executors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('executors', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->executors));
        {
          foreach ($this->executors as $iter279)
          {
            $xfer += $iter279->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 5);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errors !== null) {
      if (!is_array($this->errors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errors', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->errors));
        {
          foreach ($this->errors as $kiter280 => $viter281)
          {
            $xfer += $output->writeString($kiter280);
            {
              $output->writeListBegin(TType::STRUCT, count($viter281));
              {
                foreach ($viter281 as $iter282)
                {
                  $xfer += $iter282->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KillOptions {
  static $_TSPEC;

  public $wait_secs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wait_secs',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wait_secs'])) {
        $this->wait_secs = $vals['wait_secs'];
      }
    }
  }

  public function getName() {
    return 'KillOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wait_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KillOptions');
    if ($this->wait_secs !== null) {
      $xfer += $output->writeFieldBegin('wait_secs', TType::I32, 1);
      $xfer += $output->writeI32($this->wait_secs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RebalanceOptions {
  static $_TSPEC;

  public $wait_secs = null;
  public $num_workers = null;
  public $num_executors = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wait_secs',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'num_workers',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'num_executors',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wait_secs'])) {
        $this->wait_secs = $vals['wait_secs'];
      }
      if (isset($vals['num_workers'])) {
        $this->num_workers = $vals['num_workers'];
      }
      if (isset($vals['num_executors'])) {
        $this->num_executors = $vals['num_executors'];
      }
    }
  }

  public function getName() {
    return 'RebalanceOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wait_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_workers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->num_executors = array();
            $_size283 = 0;
            $_ktype284 = 0;
            $_vtype285 = 0;
            $xfer += $input->readMapBegin($_ktype284, $_vtype285, $_size283);
            for ($_i287 = 0; $_i287 < $_size283; ++$_i287)
            {
              $key288 = '';
              $val289 = 0;
              $xfer += $input->readString($key288);
              $xfer += $input->readI32($val289);
              $this->num_executors[$key288] = $val289;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RebalanceOptions');
    if ($this->wait_secs !== null) {
      $xfer += $output->writeFieldBegin('wait_secs', TType::I32, 1);
      $xfer += $output->writeI32($this->wait_secs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_workers !== null) {
      $xfer += $output->writeFieldBegin('num_workers', TType::I32, 2);
      $xfer += $output->writeI32($this->num_workers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_executors !== null) {
      if (!is_array($this->num_executors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('num_executors', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->num_executors));
        {
          foreach ($this->num_executors as $kiter290 => $viter291)
          {
            $xfer += $output->writeString($kiter290);
            $xfer += $output->writeI32($viter291);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SubmitOptions {
  static $_TSPEC;

  public $initial_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'initial_status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['initial_status'])) {
        $this->initial_status = $vals['initial_status'];
      }
    }
  }

  public function getName() {
    return 'SubmitOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->initial_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SubmitOptions');
    if ($this->initial_status !== null) {
      $xfer += $output->writeFieldBegin('initial_status', TType::I32, 1);
      $xfer += $output->writeI32($this->initial_status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DRPCRequest {
  static $_TSPEC;

  public $func_args = null;
  public $request_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'func_args',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'request_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['func_args'])) {
        $this->func_args = $vals['func_args'];
      }
      if (isset($vals['request_id'])) {
        $this->request_id = $vals['request_id'];
      }
    }
  }

  public function getName() {
    return 'DRPCRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->func_args);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DRPCRequest');
    if ($this->func_args !== null) {
      $xfer += $output->writeFieldBegin('func_args', TType::STRING, 1);
      $xfer += $output->writeString($this->func_args);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request_id !== null) {
      $xfer += $output->writeFieldBegin('request_id', TType::STRING, 2);
      $xfer += $output->writeString($this->request_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DRPCExecutionException extends TException {
  static $_TSPEC;

  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'DRPCExecutionException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DRPCExecutionException');
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 1);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


